"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4811],{15680:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>p,MDXProvider:()=>u,mdx:()=>y,useMDXComponents:()=>x,withMDXComponents:()=>s});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l.apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){return function(t){var n=x(t.components);return a.createElement(e,l({},t,{components:n}))}},x=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=x(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),s=x(n),u=r,c=s["".concat(o,".").concat(u)]||s[u]||g[u]||l;return n?a.createElement(c,i(i({ref:t},p),{},{components:n})):a.createElement(c,i({ref:t},p))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[c]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},64064:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=n(58168),r=(n(96540),n(15680));const l={id:"bxl.LazyContext"},o="bxl.LazyContext type",i={unversionedId:"api/bxl/bxl.LazyContext",id:"api/bxl/bxl.LazyContext",title:"bxl.LazyContext type",description:"bxl.LazyContext.analysis",source:"@site/../docs/api/bxl/bxl.LazyContext.generated.md",sourceDirName:"api/bxl",slug:"/api/bxl/bxl.LazyContext",permalink:"/docs/api/bxl/bxl.LazyContext",draft:!1,tags:[],version:"current",frontMatter:{id:"bxl.LazyContext"},sidebar:"apiSidebar",previous:{title:"bxl.Lazy type",permalink:"/docs/api/bxl/bxl.Lazy"},next:{title:"bxl.LazyResolvedAttrs type",permalink:"/docs/api/bxl/bxl.LazyResolvedAttrs"}},d={},p=[{value:"bxl.LazyContext.analysis",id:"bxllazycontextanalysis",level:2},{value:"bxl.LazyContext.configured_target_node",id:"bxllazycontextconfigured_target_node",level:2},{value:"bxl.LazyContext.join",id:"bxllazycontextjoin",level:2},{value:"bxl.LazyContext.join_all",id:"bxllazycontextjoin_all",level:2},{value:"bxl.LazyContext.unconfigured_target_node",id:"bxllazycontextunconfigured_target_node",level:2}],s={toc:p},x="wrapper";function u(e){let{components:t,...n}=e;return(0,r.mdx)(x,(0,a.A)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"bxllazycontext-type"},(0,r.mdx)("inlineCode",{parentName:"h1"},"bxl.LazyContext")," type"),(0,r.mdx)("h2",{id:"bxllazycontextanalysis"},"bxl.LazyContext.analysis"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.LazyContext.analysis(\n    label: bxl.ConfiguredTargetNode | configured_target_label | label,\n    /,\n) -> bxl.Lazy\n")),(0,r.mdx)("p",null,"Analyze a target lazily. This will return a lazy operation that can be evaluated later. The target should be a ConfiguredTargetLabel, a ConfiguredProvidersLabel, or a ConfiguredTargetNode."),(0,r.mdx)("p",null,"Example:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl(ctx):\n    target = ctx.configured_targets("cell//path/to:target")\n    analysis_result = ctx.lazy.analysis(target).resolve()\n    (analysis_result, err) = ctx.lazy.analysis(target).try_resolve()\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"bxllazycontextconfigured_target_node"},"bxl.LazyContext.configured","_","target","_","node"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.LazyContext.configured_target_node(\n    expr: bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label,\n    /,\n    *,\n    target_platform: None | str | target_label = ...,\n    modifiers: list[str] = [],\n) -> bxl.Lazy\n")),(0,r.mdx)("p",null,"Gets the configured target node for the ",(0,r.mdx)("inlineCode",{parentName:"p"},"expr"),". If given a string target pattern, it will resolve to a target set of configured target nodes. it also accepts an optional ",(0,r.mdx)("inlineCode",{parentName:"p"},"target_platform")," and an optional modifers list which is used to resolve configurations of any unconfigured target nodes. The ",(0,r.mdx)("inlineCode",{parentName:"p"},"target_platform")," is either a string that can be parsed as a target label, or a target label."),(0,r.mdx)("p",null,"The given ",(0,r.mdx)("inlineCode",{parentName:"p"},"expr")," is either:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"- a single string that is a target ot a target pattern.\n- a single target node or label, configured or unconfigured\n")),(0,r.mdx)("p",null,"Note that this function does not accept ",(0,r.mdx)("inlineCode",{parentName:"p"},"ConfiguredProviderLabel")," (which is a configured provider label), since this\nis the label of a subtarget. You can get the underlying configured target label on the ",(0,r.mdx)("inlineCode",{parentName:"p"},"Label"),"\nusing ",(0,r.mdx)("inlineCode",{parentName:"p"},"configured_targets()")," (ex: ",(0,r.mdx)("inlineCode",{parentName:"p"},"my_label.configured_target()"),")."),(0,r.mdx)("p",null,"This returns either a target set of ",(0,r.mdx)("inlineCode",{parentName:"p"},"ConfiguredTargetNode"),"s if the given ",(0,r.mdx)("inlineCode",{parentName:"p"},"expr")," is a target pattern string,\nelse a single ",(0,r.mdx)("inlineCode",{parentName:"p"},"ConfiguredTargetNode"),"."),(0,r.mdx)("p",null,"When the given a target pattern (returns the target set), for the incompatible targets, it will print the warning message of these incompatible targets.\nElse (returns a single ",(0,r.mdx)("inlineCode",{parentName:"p"},"ConfiguredTargetNode"),"), it will raise an error if incompatible when resolve. Use ",(0,r.mdx)("inlineCode",{parentName:"p"},"Lazy.catch()")," to catch the error."),(0,r.mdx)("p",null,"Example:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl(ctx):\n    # returns a single `ConfiguredTargetNode`\n    node = ctx.lazy.configured_target_node("cell//path/to:target").resolve()\n\n    # returns a target set of `ConfiguredTargetNode`s\n    target_set = ctx.lazy.configured_target_node("cell//path/to:").resolve()\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"bxllazycontextjoin"},"bxl.LazyContext.join"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.LazyContext.join(lazy0: bxl.Lazy, lazy1: bxl.Lazy, /) -> bxl.Lazy\n")),(0,r.mdx)("p",null,"Join two lazy operations into a single operation that can be evaluated."),(0,r.mdx)("p",null,"Example:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-text"},"def _impl(ctx):\n    ...\n    joined = ctx.lazy.join(ctx.lazy.analysis(t1), ctx.lazy.analysis(t2))\n    (res1, res2) = joined.resolve()\n    ctx.output.print(res1)\n    ctx.output.print(res2)\n")),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"bxllazycontextjoin_all"},"bxl.LazyContext.join","_","all"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.LazyContext.join_all(operations: list[bxl.Lazy], /) -> bxl.Lazy\n")),(0,r.mdx)("p",null,"Join a list of lazy operations into a single operation that can be evaluated. This is useful when you want to evaluate multiple operations in parallel. Using ",(0,r.mdx)("inlineCode",{parentName:"p"},".try_resolve()")," can catch errors for the individual operations."),(0,r.mdx)("p",null,"Example:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-text"},"def _impl(ctx):\n    ...\n    joined = ctx.lazy.join_all([ctx.lazy.analysis(t) for t in targets])\n    analysis_results = joined.resolve()\n    ctx.output.print(analysis_results)\n")),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"bxllazycontextunconfigured_target_node"},"bxl.LazyContext.unconfigured","_","target","_","node"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.LazyContext.unconfigured_target_node(\n    expr: bxl.UnconfiguredTargetNode | str | target_label,\n    /,\n) -> bxl.Lazy\n")),(0,r.mdx)("p",null,"Gets the unconfigured target node(s) for the ",(0,r.mdx)("inlineCode",{parentName:"p"},"expr")),(0,r.mdx)("p",null,"The given ",(0,r.mdx)("inlineCode",{parentName:"p"},"expr")," is either:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"- a single string that is a target ot a target pattern.\n- a single unconfigured target node or label\n")),(0,r.mdx)("p",null,"This returns either a target set of ",(0,r.mdx)("inlineCode",{parentName:"p"},"UnconfiguredTargetNode"),"s if the given ",(0,r.mdx)("inlineCode",{parentName:"p"},"expr")," is a target pattern string,\nelse a single ",(0,r.mdx)("inlineCode",{parentName:"p"},"UnconfiguredTargetNode"),"."))}u.isMDXComponent=!0}}]);