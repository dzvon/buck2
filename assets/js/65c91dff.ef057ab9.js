"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4107],{15680:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>d,MDXProvider:()=>u,mdx:()=>h,useMDXComponents:()=>m,withMDXComponents:()=>p});var r=n(96540);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a.apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var d=r.createContext({}),p=function(e){return function(t){var n=m(t.components);return r.createElement(e,a({},t,{components:n}))}},m=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=m(e.components);return r.createElement(d.Provider,{value:t},e.children)},c="mdxType",x={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,i=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=m(n),u=s,c=p["".concat(i,".").concat(u)]||p[u]||x[u]||a;return n?r.createElement(c,l(l({ref:t},d),{},{components:n})):r.createElement(c,l({ref:t},d))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,i=new Array(a);i[0]=f;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[c]="string"==typeof e?e:s,i[1]=l;for(var d=2;d<a;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},13991:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=n(58168),s=(n(96540),n(15680));const a={id:"set"},i="set type",l={unversionedId:"api/starlark/set",id:"api/starlark/set",title:"set type",description:"set.add",source:"@site/../docs/api/starlark/set.generated.md",sourceDirName:"api/starlark",slug:"/api/starlark/set",permalink:"/docs/api/starlark/set",draft:!1,tags:[],version:"current",frontMatter:{id:"set"},sidebar:"apiSidebar",previous:{title:"list type",permalink:"/docs/api/starlark/list"},next:{title:"string type",permalink:"/docs/api/starlark/string"}},o={},d=[{value:"set.add",id:"setadd",level:2},{value:"set.clear",id:"setclear",level:2},{value:"set.difference",id:"setdifference",level:2},{value:"set.discard",id:"setdiscard",level:2},{value:"set.intersection",id:"setintersection",level:2},{value:"set.issubset",id:"setissubset",level:2},{value:"set.issuperset",id:"setissuperset",level:2},{value:"set.pop",id:"setpop",level:2},{value:"set.remove",id:"setremove",level:2},{value:"set.symmetric_difference",id:"setsymmetric_difference",level:2},{value:"set.union",id:"setunion",level:2}],p={toc:d},m="wrapper";function u(e){let{components:t,...n}=e;return(0,s.mdx)(m,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)("h1",{id:"set-type"},(0,s.mdx)("inlineCode",{parentName:"h1"},"set")," type"),(0,s.mdx)("h2",{id:"setadd"},"set.add"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},"def set.add(value, /) -> None\n")),(0,s.mdx)("p",null,"Add an item to the set. ",(0,s.mdx)("inlineCode",{parentName:"p"},'# starlark::assert::is_true(r#" x = set([1, 2, 3]) x.add(4) x == set([1, 2, 3, 4]) # "#);')),(0,s.mdx)("hr",null),(0,s.mdx)("h2",{id:"setclear"},"set.clear"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},"def set.clear() -> None\n")),(0,s.mdx)("hr",null),(0,s.mdx)("h2",{id:"setdifference"},"set.difference"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},"def set.difference(other: typing.Iterable, /) -> set[typing.Any]\n")),(0,s.mdx)("p",null,"Returns a new set with elements unique the set when compared to the specified iterable. ",(0,s.mdx)("inlineCode",{parentName:"p"},'# starlark::assert::is_true(r#" x = set([1, 2, 3]) y = [3, 4, 5] x.difference(y) == set([1, 2]) # "#);')),(0,s.mdx)("hr",null),(0,s.mdx)("h2",{id:"setdiscard"},"set.discard"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},"def set.discard(value, /) -> None\n")),(0,s.mdx)("p",null,"Remove the item from the set. It does nothing if there is no such item."),(0,s.mdx)("p",null,(0,s.mdx)("inlineCode",{parentName:"p"},"discard")," fails if the key is unhashable or if the dictionary is\nfrozen.\nTime complexity of this operation is ",(0,s.mdx)("em",{parentName:"p"},"O(N)")," where ",(0,s.mdx)("em",{parentName:"p"},"N")," is the number of entries in the set."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre"},"x = set([1, 2, 3])\nx.discard(2)\nx == set([1, 3])\n")),(0,s.mdx)("p",null,"A subsequent call to ",(0,s.mdx)("inlineCode",{parentName:"p"},"x.discard(2)")," would do nothing."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre"},"x = set([1, 2, 3])\nx.discard(2)\nx.discard(2)\nx == set([1, 3])\n")),(0,s.mdx)("hr",null),(0,s.mdx)("h2",{id:"setintersection"},"set.intersection"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},"def set.intersection(other: typing.Iterable, /) -> set[typing.Any]\n")),(0,s.mdx)("p",null,"Return a new set with elements common to the set and all others. Unlike Python does not support variable number of arguments. ",(0,s.mdx)("inlineCode",{parentName:"p"},'# starlark::assert::is_true(r#" x = set([1, 2, 3]) y = [3, 4, 5] x.intersection(y) == set([3]) # "#);')),(0,s.mdx)("hr",null),(0,s.mdx)("h2",{id:"setissubset"},"set.issubset"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},"def set.issubset(other: typing.Iterable, /) -> bool\n")),(0,s.mdx)("p",null,"Test whether every element in the set is in other iterable. ",(0,s.mdx)("inlineCode",{parentName:"p"},'# starlark::assert::is_true(r#" x = set([1, 2, 3]) y = [3, 1, 2] x.issubset(y) # "#);')),(0,s.mdx)("hr",null),(0,s.mdx)("h2",{id:"setissuperset"},"set.issuperset"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},"def set.issuperset(other: typing.Iterable, /) -> bool\n")),(0,s.mdx)("p",null,"Test whether every element other iterable is in the set. ",(0,s.mdx)("inlineCode",{parentName:"p"},'# starlark::assert::is_true(r#" x = set([1, 2, 3]) y = [1, 3] x.issuperset(y) == True # "#);')),(0,s.mdx)("hr",null),(0,s.mdx)("h2",{id:"setpop"},"set.pop"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},"def set.pop()\n")),(0,s.mdx)("p",null,"Removes and returns the ",(0,s.mdx)("strong",{parentName:"p"},"last")," element of a set."),(0,s.mdx)("p",null,(0,s.mdx)("inlineCode",{parentName:"p"},"S.pop()")," removes and returns the last element of the set S."),(0,s.mdx)("p",null,(0,s.mdx)("inlineCode",{parentName:"p"},"pop")," fails if the set is empty, or if the set is frozen or has active iterators.\nTime complexity of this operation is ",(0,s.mdx)("em",{parentName:"p"},"O(1)"),"."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre"},"x = set([1, 2, 3])\nx.pop() == 3\nx.pop() == 2\nx == set([1])\n")),(0,s.mdx)("hr",null),(0,s.mdx)("h2",{id:"setremove"},"set.remove"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},"def set.remove(value, /) -> None\n")),(0,s.mdx)("p",null,"Remove the item from the set. It raises an error if there is no such item."),(0,s.mdx)("p",null,(0,s.mdx)("inlineCode",{parentName:"p"},"remove")," fails if the key is unhashable or if the dictionary is\nfrozen.\nTime complexity of this operation is ",(0,s.mdx)("em",{parentName:"p"},"O(N)")," where ",(0,s.mdx)("em",{parentName:"p"},"N")," is the number of entries in the set."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre"},"x = set([1, 2, 3])\nx.remove(2)\nx == set([1, 3])\n")),(0,s.mdx)("p",null,"A subsequent call to ",(0,s.mdx)("inlineCode",{parentName:"p"},"x.remove(2)")," would yield an error because the\nelement won't be found."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre"},"x = set([1, 2, 3])\nx.remove(2)\nx.remove(2) # error: not found\n")),(0,s.mdx)("hr",null),(0,s.mdx)("h2",{id:"setsymmetric_difference"},"set.symmetric","_","difference"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},"def set.symmetric_difference(other: typing.Iterable, /) -> set[typing.Any]\n")),(0,s.mdx)("p",null,"Returns a new set with elements in either the set or the specified iterable but not both. ",(0,s.mdx)("inlineCode",{parentName:"p"},'# starlark::assert::is_true(r#" x = set([1, 2, 3]) y = [3, 4, 5] x.symmetric_difference(y) == set([1, 2, 4, 5]) # "#);')),(0,s.mdx)("hr",null),(0,s.mdx)("h2",{id:"setunion"},"set.union"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},"def set.union(other: typing.Iterable, /) -> set[typing.Any]\n")),(0,s.mdx)("p",null,"Return a new set with elements from the set and all others. Unlike Python does not support variable number of arguments. ",(0,s.mdx)("inlineCode",{parentName:"p"},'# starlark::assert::is_true(r#" x = set([1, 2, 3]) y = [3, 4, 5] x.union(y) == set([1, 2, 3, 4, 5]) # "#);')))}u.isMDXComponent=!0}}]);