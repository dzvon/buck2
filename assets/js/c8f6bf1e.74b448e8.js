"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8788],{15680:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>i,MDXProvider:()=>c,mdx:()=>f,useMDXComponents:()=>p,withMDXComponents:()=>g});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l.apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),g=function(e){return function(t){var n=p(t.components);return r.createElement(e,l({},t,{components:n}))}},p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},x="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,i=u(e,["components","mdxType","originalType","parentName"]),g=p(n),c=a,x=g["".concat(o,".").concat(c)]||g[c]||m[c]||l;return n?r.createElement(x,d(d({ref:t},i),{},{components:n})):r.createElement(x,d({ref:t},i))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=s;var d={};for(var u in t)hasOwnProperty.call(t,u)&&(d[u]=t[u]);d.originalType=e,d[x]="string"==typeof e?e:a,o[1]=d;for(var i=2;i<l;i++)o[i]=n[i];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},64129:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>d,toc:()=>i});var r=n(58168),a=(n(96540),n(15680));const l={id:"bxl.UnconfiguredTargetNode"},o="bxl.UnconfiguredTargetNode type",d={unversionedId:"api/bxl/bxl.UnconfiguredTargetNode",id:"api/bxl/bxl.UnconfiguredTargetNode",title:"bxl.UnconfiguredTargetNode type",description:"Methods for unconfigured target node.",source:"@site/../docs/api/bxl/bxl.UnconfiguredTargetNode.generated.md",sourceDirName:"api/bxl",slug:"/api/bxl/bxl.UnconfiguredTargetNode",permalink:"/docs/api/bxl/bxl.UnconfiguredTargetNode",draft:!1,tags:[],version:"current",frontMatter:{id:"bxl.UnconfiguredTargetNode"},sidebar:"apiSidebar",previous:{title:"bxl.TargetUniverse type",permalink:"/docs/api/bxl/bxl.TargetUniverse"},next:{title:"bxl.UqueryContext type",permalink:"/docs/api/bxl/bxl.UqueryContext"}},u={},i=[{value:"bxl.UnconfiguredTargetNode.attrs",id:"bxlunconfiguredtargetnodeattrs",level:2},{value:"bxl.UnconfiguredTargetNode.buildfile_path",id:"bxlunconfiguredtargetnodebuildfile_path",level:2},{value:"bxl.UnconfiguredTargetNode.deps",id:"bxlunconfiguredtargetnodedeps",level:2},{value:"bxl.UnconfiguredTargetNode.get_attr",id:"bxlunconfiguredtargetnodeget_attr",level:2},{value:"bxl.UnconfiguredTargetNode.get_attrs",id:"bxlunconfiguredtargetnodeget_attrs",level:2},{value:"bxl.UnconfiguredTargetNode.has_attr",id:"bxlunconfiguredtargetnodehas_attr",level:2},{value:"bxl.UnconfiguredTargetNode.label",id:"bxlunconfiguredtargetnodelabel",level:2},{value:"bxl.UnconfiguredTargetNode.oncall",id:"bxlunconfiguredtargetnodeoncall",level:2},{value:"bxl.UnconfiguredTargetNode.rule_kind",id:"bxlunconfiguredtargetnoderule_kind",level:2},{value:"bxl.UnconfiguredTargetNode.rule_type",id:"bxlunconfiguredtargetnoderule_type",level:2}],g={toc:i},p="wrapper";function c(e){let{components:t,...n}=e;return(0,a.mdx)(p,(0,r.A)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"bxlunconfiguredtargetnode-type"},(0,a.mdx)("inlineCode",{parentName:"h1"},"bxl.UnconfiguredTargetNode")," type"),(0,a.mdx)("p",null,"Methods for unconfigured target node."),(0,a.mdx)("h2",{id:"bxlunconfiguredtargetnodeattrs"},"bxl.UnconfiguredTargetNode.attrs"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"bxl.UnconfiguredTargetNode.attrs: typing.Any\n")),(0,a.mdx)("p",null,"Gets the coerced attributes from the unconfigured target node. Returns a struct."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_attributes(ctx):\n    target_node = ctx.uquery().eval("//foo:bar")[0]\n    ctx.output.print(target_node.attrs.my_attr)\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"bxlunconfiguredtargetnodebuildfile_path"},"bxl.UnconfiguredTargetNode.buildfile","_","path"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"bxl.UnconfiguredTargetNode.buildfile_path: bxl.FileNode\n")),(0,a.mdx)("p",null,"Gets the buildfile path from the unconfigured target node."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_label(ctx):\n    target_node = ctx.uquery().eval("//foo:bar")[0]\n    ctx.output.print(target_node.buildfile_path)\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"bxlunconfiguredtargetnodedeps"},"bxl.UnconfiguredTargetNode.deps"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.UnconfiguredTargetNode.deps() -> list[target_label]\n")),(0,a.mdx)("p",null,"Gets all deps for this target. The result is a list of ",(0,a.mdx)("inlineCode",{parentName:"p"},"UnconfiguredTargetLabel"),"."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_get_deps(ctx):\n    target_node = ctx.uquery().eval("//foo:bar")[0]\n    ctx.output.print(target_node.deps())\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"bxlunconfiguredtargetnodeget_attr"},"bxl.UnconfiguredTargetNode.get","_","attr"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.UnconfiguredTargetNode.get_attr(key: str, /)\n")),(0,a.mdx)("p",null,"Gets the attribute from the unconfigured target node. If the attribute is unset, returns the default value. If the attribute is not defined by the rule, returns ",(0,a.mdx)("inlineCode",{parentName:"p"},"None"),". It will not return special attribute (attribute that start with 'buck.' in `buck2 uquery -A`` command)."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"def _impl_attributes(ctx):\n    target_node = ctx.uquery().eval(\"//foo:bar\")[0]\n    ctx.output.print(target_node.get_attr('my_attr'))\n")),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"bxlunconfiguredtargetnodeget_attrs"},"bxl.UnconfiguredTargetNode.get","_","attrs"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.UnconfiguredTargetNode.get_attrs() -> dict[str, typing.Any]\n")),(0,a.mdx)("p",null,"Gets the all attributes (not include speical attributes) from the unconfigured target node. For attributes that are not explicitly set, the default value is returned."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_attributes(ctx):\n    target_node = ctx.uquery().eval("//foo:bar")[0]\n    ctx.output.print(target_node.get_attrs())\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"bxlunconfiguredtargetnodehas_attr"},"bxl.UnconfiguredTargetNode.has","_","attr"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.UnconfiguredTargetNode.has_attr(key: str, /) -> bool\n")),(0,a.mdx)("p",null,"Check if rule has the attribute."),(0,a.mdx)("p",null,"Known attribute is always set explicitly or to default value\n(otherwise target would not be created)\nFor special attributes, it will return ",(0,a.mdx)("inlineCode",{parentName:"p"},"False")),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"def _impl_attributes(ctx):\n    target_node = ctx.uquery().eval(\"//foo:bar\")[0]\n    ctx.output.print(target_node.has_attr('my_attr'))\n")),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"bxlunconfiguredtargetnodelabel"},"bxl.UnconfiguredTargetNode.label"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"bxl.UnconfiguredTargetNode.label: target_label\n")),(0,a.mdx)("p",null,"Gets the label from the unconfigured target node."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_label(ctx):\n    target_node = ctx.uquery().eval("//foo:bar")[0]\n    ctx.output.print(target_node.label)\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"bxlunconfiguredtargetnodeoncall"},"bxl.UnconfiguredTargetNode.oncall"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"bxl.UnconfiguredTargetNode.oncall: None | str\n")),(0,a.mdx)("p",null,"Gets the target's special attr ",(0,a.mdx)("inlineCode",{parentName:"p"},"oncall")),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_get_oncall(ctx):\n    target_node = ctx.uquery().eval("//foo:bar")[0]\n    ctx.output.print(target_node.oncall)\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"bxlunconfiguredtargetnoderule_kind"},"bxl.UnconfiguredTargetNode.rule","_","kind"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"bxl.UnconfiguredTargetNode.rule_kind: str\n")),(0,a.mdx)("p",null,"Gets the targets' corresponding rule's kind which is one of - normal (with no special properties) - configured (usable in a configuration context) - toolchain (only usable as a toolchain dep)"),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_rule_kind(ctx):\n    target_node = ctx.uquery().eval("//foo:bar")[0]\n    ctx.output.print(target_node.rule_kind)\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"bxlunconfiguredtargetnoderule_type"},"bxl.UnconfiguredTargetNode.rule","_","type"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"bxl.UnconfiguredTargetNode.rule_type: str\n")),(0,a.mdx)("p",null,"Gets the fully qualified name of the rule for this unconfigured target node as a string. This includes the import path as well."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_rule_type(ctx):\n    target_node = ctx.uquery().eval("//foo:bar")[0]\n    ctx.output.print(target_node.rule_type)\n')))}c.isMDXComponent=!0}}]);